package com.genertech.phm;

import com.alibaba.fastjson.JSON;
import com.genertech.common.Constants;
import com.genertech.common.base.service.BaseDaoService;
import com.genertech.common.utils.Identities;
import com.genertech.consumer.domain.CZPS;
import com.genertech.phm.pojo.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class PhmManager {
    private static final Logger log = LogManager.getLogger(PhmManager.class);

    @Autowired
    private BaseDaoService daoService;

    /**
     * 找出沈阳局的车组
     * @param trainNo
     * @return
     */
    private CZPS czpsExist(String trainNo){
        List list = czpsExistList(Arrays.asList(trainNo));
        if(list.size() > 0)
            return (CZPS) list.get(0);
        return null;
    }
    private List<CZPS> czpsExistList(List<String> trainNos){
        if(trainNos.size() == 0){
            return new ArrayList<>(0);
        }
        int diffCount = 500;
        int diffCic = 0;
        int n = 0;
        if(trainNos.size() %diffCount == 0){
            diffCic = trainNos.size()/diffCount;
        }else{
            diffCic = trainNos.size()/diffCount+1;
        }
        String sql = "select * from czps where sa in (select GROUP_CODE from IDP_DEPT where pid='5') and zz='1' and ag in (#{trainNos})";
        Map<String, Object> params = new HashMap<>();
        List allList = new ArrayList();
        for (int dif = 0; dif < diffCic; dif++) {
            int start = dif * diffCount;
            int end = (dif + 1) * diffCount;
            //分批
            params.put("trainNos",trainNos.subList(start,end > trainNos.size() ? trainNos.size():end));
            List list = daoService.list(sql, params, CZPS.class);
            allList.addAll(list);
        }
        return allList;
    }

    /**
     * 维修建议
     * @param data
     */
    @JmsListener(destination = Constants.PHM_REPAIR_ADVICE_TOPIC,containerFactory="containerFactory")
    public void phmRepairAdviceTopicBath(String data){
        /**
         * 批量数据处理
         */
        List<RepairAdvice> list = JSON.parseArray(data,RepairAdvice.class);
        List<String> trainNos = list.stream().map(a->a.getEquipSn()).collect(Collectors.toList());
        //获得沈阳局已有的车组配属
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            RepairAdvice record = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(record.getEquipSn())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else{
                CZPS czps = filterList.get(0);
                record.setPhmId(record.getId());
                record.setId(Identities.uuid());
                record.setTrainTypeId(czps.getAA());
                record.setTrainId(czps.getId());
                record.setSource("PHM");
                record.setStatus("0");
            }
        }
        if(list.size() > 0)
        daoService.insertAllObjects(list,500);
    }
    /**
     * 故障预测
     * @param data
     */
    @JmsListener(destination = Constants.PHM_PROGNOSIS_TOPIC,containerFactory="containerFactory")
    public void phmPrognosisTopicBath(String data) {
        /**
         * 批量数据处理
         */
        List<Prognostics> list = JSON.parseArray(data,Prognostics.class);
        List<String> trainNos = list.stream().map(a->a.getEquipSn()).collect(Collectors.toList());
        //获得沈阳局已有的车组配属
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            Prognostics record = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(record.getEquipSn())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else{
                CZPS czps = filterList.get(0);
                record.setPhmId(record.getId());
                record.setId(Identities.uuid());
                record.setModelCode(czps.getAA());
                record.setTrainNo(czps.getId());
                record.setTrain(record.getEquipSn());
                record.setModel(record.getEquipType());
                record.setSource("PHM");
                record.setStatus("0");
            }
        }
        if(list.size() > 0)
        daoService.insertAllObjects(list,500);
    }
    /**
     * 寿命件次数批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_TTF_TOPIC,containerFactory="containerFactory")
    public void phmTtfTopicBath(String data) {
        /**
         * 批量数据处理
         */
        List<TTF> list = JSON.parseArray(data,TTF.class);
        list.stream().forEach(a->a.setId(Identities.uuid()));
        if(list.size() > 0)
        daoService.insertAllObjects(list,500);
    }
    /**
     * 车轮磨耗分析批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_WHEEL_ABRASION_LAW_TOPIC,containerFactory="containerFactory")
    public void phmWheelAbrasionLawTopicBath(String data) {
        /**
         * 批量数据处理
         */
        List<ModelWheelAbrasionLaw> list = JSON.parseArray(data,ModelWheelAbrasionLaw.class);
        list.stream().forEach(a->a.setId(Identities.uuid()));
        if(list.size() > 0)
        daoService.insertAllObjects(list,500);
    }
    /**
     * 轮径到限批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_WHEEL_SIZE_LIMIT_HIS_TOPIC,containerFactory="containerFactory")
    public void phmWheelSizeLimitHisTopicBath(String data) {
        /**
         * 批量数据处理
         */
        List<ModelWheelSizeLimitHis> list = JSON.parseArray(data,ModelWheelSizeLimitHis.class);
        List<String> trainNos = list.stream().map(a->a.getGroup()).collect(Collectors.toList());
        //获得沈阳局存在的车组
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            ModelWheelSizeLimitHis modelWheelSizeLimitHis = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(modelWheelSizeLimitHis.getGroup())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else {
                modelWheelSizeLimitHis.setId(Identities.uuid());
            }
        }
        if(list.size() > 0)
        daoService.insertAllObjects(list,500);
    }
}
