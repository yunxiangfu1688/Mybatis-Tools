package com.genertech.phm;

import com.alibaba.fastjson.JSON;
import com.genertech.common.Constants;
import com.genertech.common.base.service.BaseDaoService;
import com.genertech.common.utils.Identities;
import com.genertech.consumer.ConsumerManager;
import com.genertech.consumer.domain.CPZD;
import com.genertech.consumer.domain.CZPS;
import com.genertech.phm.pojo.*;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class PhmManager {
    private static final Logger log = LogManager.getLogger(ConsumerManager.class);

    @Autowired
    private BaseDaoService daoService;

    /**
     * 找出沈阳局的车组
     * @param trainNos
     * @return
     */
    private List<CZPS> czpsExistList(List<String> trainNos){
        if(trainNos.size() == 0){
            return new ArrayList<>(0);
        }
        int diffCount = 500;
        int diffCic = 0;
        int n = 0;
        if(trainNos.size() %diffCount == 0){
            diffCic = trainNos.size()/diffCount;
        }else{
            diffCic = trainNos.size()/diffCount+1;
        }
        String sql = "select * from czps where sa in (select GROUP_CODE from IDP_DEPT where pid='5') and zz='1' and ag in (#{trainNos})";
        Map<String, Object> params = new HashMap<>();
        List allList = new ArrayList();
        for (int dif = 0; dif < diffCic; dif++) {
            int start = dif * diffCount;
            int end = (dif + 1) * diffCount;
            //分批
            params.put("trainNos",trainNos.subList(start,end > trainNos.size() ? trainNos.size():end));
            List list = daoService.list(sql, params, CZPS.class);
            allList.addAll(list);
        }
        return allList;
    }

    /**
     * 找出沈阳局的车型
     * @param trainTypes
     * @return
     */
    private List<CPZD> cpzdExistList(List<String> trainTypes){
        if(trainTypes.size() == 0){
            return new ArrayList<>(0);
        }
        String sql = "select * from cpzd where zz='1' and ab in (#{trainTypes})";
        Map<String, Object> params = new HashMap<>();
        params.put("trainTypes",trainTypes);
        List list = daoService.list(sql, params, CPZD.class);
        return list;
    }

    /**
     * 维修建议
     * @param data
     */
    @JmsListener(destination = Constants.PHM_REPAIR_ADVICE_TOPIC,containerFactory="containerFactory")
    public void phmRepairAdviceTopicBath(String data){
        //单数据
        phmRepairAdviceTopicBath(Arrays.asList(JSON.parseObject(data,RepairAdvice.class)),data);
        //批量数据
//        phmRepairAdviceTopicBath(JSON.parseArray(data,RepairAdvice.class),data);
    }
    public void phmRepairAdviceTopicBath(List<RepairAdvice> list,String data){
        /**
         * 批量数据处理
         */
        log.info(Constants.PHM_REPAIR_ADVICE_TOPIC+" receive size:"+list.size());
//        log.info();
        List<String> trainNos = list.stream().map(a -> a.getEquipSn()).collect(Collectors.toList());
        //获得沈阳局已有的车组配属
        List<CZPS> czpsList = czpsExistList(trainNos);
        for (int i = 0; i < list.size(); i++) {
            RepairAdvice record = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(record.getEquipSn())).collect(Collectors.toList());
            if (filterList.size() == 0) {
                //删除不存在的
                list.remove(i);
                i = i - 1;
            } else {
                CZPS czps = filterList.get(0);
                record.setPhmId(record.getId());
                record.setId(Identities.uuid());
                record.setTrainTypeId(czps.getAA());
                record.setTrainId(czps.getId());
                record.setSource("PHM");
                record.setStatus("0");
                record.setPushTime(new Date());
                record.setCreateTime(new Date());
            }
        }
        if (list.size() > 0) {
            try {
                daoService.insertAllObjects(list, 500);
                log.info("PHM_REPAIR_ADVICE_TOPIC success size:" + list.size());
            }catch (Exception ex){
                log.error("PHM_REPAIR_ADVICE_TOPIC insert error:" + data,ex);
            }
        }
    }
    /**
     * 故障预测
     * @param data
     */
    @JmsListener(destination = Constants.PHM_PROGNOSIS_TOPIC,containerFactory="containerFactory")
    public void phmPrognosisTopicBath(String data){
        //单数据
        phmPrognosisTopicBath(Arrays.asList(JSON.parseObject(data,Prognostics.class)),data);
        //批量数据
//        phmPrognosisTopicBath(JSON.parseArray(data,Prognostics.class),data);
    }
    public void phmPrognosisTopicBath(List<Prognostics> list,String data) {
        /**
         * 批量数据处理
         */
        log.info(Constants.PHM_PROGNOSIS_TOPIC+" receive size:"+list.size());
        List<String> trainNos = list.stream().map(a->a.getEquipSn()).collect(Collectors.toList());
        //获得沈阳局已有的车组配属
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            Prognostics record = list.get(i);
            if(record.getSysCode() == null) {
                //删除无效数据
                list.remove(i);
                i = i-1;
                continue;
            }
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(record.getEquipSn())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else{
                CZPS czps = filterList.get(0);
                record.setPhmId(record.getId());
                record.setId(Identities.uuid());
                record.setModelCode(czps.getAA());
                record.setTrainNo(czps.getId());
                record.setTrain(record.getEquipSn());
                record.setModel(record.getEquipType());
                record.setSource("PHM");
                record.setStatus("0");
//                record.setPushTime(new Date());
                record.setCreateTime(new Date());
            }
        }
        if (list.size() > 0) {
            try {
                daoService.insertAllObjects(list, 500);
                log.info(Constants.PHM_PROGNOSIS_TOPIC+" success size:" + list.size());
            }catch (Exception ex){
                log.error(Constants.PHM_PROGNOSIS_TOPIC+" insert error:" + data,ex);
            }
        }
    }
    /**
     * 寿命件次数批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_TTF_TOPIC,containerFactory="containerFactory")
    public void phmTtfTopicBath(String data){
        //单数据
        phmTtfTopicBath(Arrays.asList(JSON.parseObject(data,TTF.class)),data);
        //批量数据
//        phmTtfTopicBath(JSON.parseArray(data,TTF.class),data);
    }
    public void phmTtfTopicBath(List<TTF> list,String data) {
        /**
         * 批量数据处理
         */
        log.info(Constants.PHM_TTF_TOPIC+" receive size:"+list.size());
        List<String> trainNos = list.stream().map(a->a.getEquipSn()).collect(Collectors.toList());
        //获得沈阳局存在的车组
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            TTF ttf = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(ttf.getEquipSn())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else {
                ttf.setId(Identities.uuid());
            }
        }
        if (list.size() > 0) {
            try {
                daoService.insertAllObjects(list, 500);
                log.info(Constants.PHM_TTF_TOPIC+" success size:" + list.size());
            }catch (Exception ex){
                log.error(Constants.PHM_TTF_TOPIC+" insert error:" + data,ex);
            }
        }
//        list.stream().forEach(a->a.setId(Identities.uuid()));
//        if (list.size() > 0) {
//            try {
//                daoService.insertAllObjects(list, 500);
//                log.info(Constants.PHM_TTF_TOPIC+" success size:" + list.size());
//            }catch (Exception ex){
//                log.error(Constants.PHM_TTF_TOPIC+" insert error:" + data,ex);
//            }
//        }
    }
    /**
     * 车轮磨耗分析批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_WHEEL_ABRASION_LAW_TOPIC,containerFactory="containerFactory")
    public void phmWheelAbrasionLawTopicBath(String data){
        //单数据
        phmWheelAbrasionLawTopicBath(Arrays.asList(JSON.parseObject(data,ModelWheelAbrasionLaw.class)),data);
        //批量数据
//        phmWheelAbrasionLawTopicBath(JSON.parseArray(data,ModelWheelAbrasionLaw.class),data);
    }
    public void phmWheelAbrasionLawTopicBath(List<ModelWheelAbrasionLaw> list,String data) {
        /**
         * 批量数据处理
         */
//        List<ModelWheelAbrasionLaw> list = JSON.parseArray(data,ModelWheelAbrasionLaw.class);
        log.info(Constants.PHM_WHEEL_ABRASION_LAW_TOPIC+" receive size:"+list.size());
        List<String> trainNos = list.stream().map(a->a.getTrainType()).collect(Collectors.toList());
        //获得沈阳局已有的车型
        List<CPZD> cpzdList = cpzdExistList(trainNos);
        for(int i=0;i<list.size();i++){
            ModelWheelAbrasionLaw wheelAbrasionLaw = list.get(i);
            if(wheelAbrasionLaw.getTrainType() == null) {
                //删除无效数据
                list.remove(i);
                i = i-1;
                continue;
            }
            //取出指定车组配属
            List<CPZD> filterList = cpzdList.stream().filter(a -> a.getAB().equals(wheelAbrasionLaw.getTrainType())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else{
                wheelAbrasionLaw.setId(Identities.uuid());
                wheelAbrasionLaw.setCreateTime(new Date());
            }
        }
        if (list.size() > 0) {
            try {
                daoService.insertAllObjects(list, 500);
                log.info(Constants.PHM_WHEEL_ABRASION_LAW_TOPIC+" success size:" + list.size());
            }catch (Exception ex){
                log.error(Constants.PHM_WHEEL_ABRASION_LAW_TOPIC+" insert error:" + data,ex);
            }
        }
    }
    /**
     * 轮径到限批量
     * @param data
     */
    @JmsListener(destination = Constants.PHM_WHEEL_SIZE_LIMIT_HIS_TOPIC,containerFactory="containerFactory")
    public void phmWheelSizeLimitHisTopicBath(String data){
        //单数据
        phmWheelSizeLimitHisTopicBath(Arrays.asList(JSON.parseObject(data,ModelWheelSizeLimitHis.class)),data);
        //批量数据
//        phmWheelSizeLimitHisTopicBath(JSON.parseArray(data,ModelWheelAbrasionLaw.class),data);
    }
    public void phmWheelSizeLimitHisTopicBath(List<ModelWheelSizeLimitHis> list,String data) {
        /**
         * 批量数据处理
         */
//        List<ModelWheelSizeLimitHis> list = JSON.parseArray(data,ModelWheelSizeLimitHis.class);
        log.info(Constants.PHM_WHEEL_SIZE_LIMIT_HIS_TOPIC+" receive size:"+list.size());
        List<String> trainNos = list.stream().map(a->a.getGroup()).collect(Collectors.toList());
        //获得沈阳局存在的车组
        List<CZPS> czpsList = czpsExistList(trainNos);
        for(int i=0;i<list.size();i++){
            ModelWheelSizeLimitHis modelWheelSizeLimitHis = list.get(i);
            //取出指定车组配属
            List<CZPS> filterList = czpsList.stream().filter(a -> a.getAG().equals(modelWheelSizeLimitHis.getGroup())).collect(Collectors.toList());
            if(filterList.size() == 0){
                //删除不存在的
                list.remove(i);
                i = i-1;
            }else {
                modelWheelSizeLimitHis.setId(Identities.uuid());
            }
        }
        if (list.size() > 0) {
            try {
                daoService.insertAllObjects(list, 500);
                log.info(Constants.PHM_WHEEL_SIZE_LIMIT_HIS_TOPIC+" success size:" + list.size());
            }catch (Exception ex){
                log.error(Constants.PHM_WHEEL_SIZE_LIMIT_HIS_TOPIC+" insert error:" + data,ex);
            }
        }
    }
}
