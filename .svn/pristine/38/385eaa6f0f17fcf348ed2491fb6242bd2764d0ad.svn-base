package com.genertech.common.base.service;
/**
 * yunxiangfu@163.com
 * 20190301
 */

import com.genertech.common.base.bean.Pager;
import com.genertech.common.base.dao.BaseMapper;
import com.genertech.common.base.utils.DaoUtil;
import com.genertech.common.utils.DateUtils;
import com.genertech.common.utils.FormatConstants;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service(value = "baseDaoServie")
//@Component
public class BaseDaoServiceImpl implements BaseDaoService {
    private static final Logger log = LoggerFactory.getLogger(BaseDaoServiceImpl.class);
    @Resource
    private BaseMapper baseMapper;

    /**
     * 实体对象插入到数据库
     * @param entity
     * @return
     */
    public int insertObject(Object entity) {
        Map<String, Object> params = DaoUtil.transformObj(entity);
        log.info(new StringBuffer("Function Insert.Transformed Params:").append(params).toString());
        return baseMapper.insert(params);
    }
    /**
     * 采用 union all select方式insert，该方式效率较高，会对对象所有注解字段进行操作
     * @param list      实体对象集合
     * @return
     */
    public int insertObjectAllColumn(List<Object> list) {
        if(list==null || list.size() == 0)
            return 0;
        Object entity = list.get(0);
        List<String> columns = DaoUtil.getAllColumn(entity,false);
        StringBuilder columnStr = new StringBuilder();
        int j = 0;
        for(String column:columns){
            if(j > 0)columnStr.append(",");
            columnStr.append(column);
            j++;
        }
        return insertObject(columnStr.toString(),list);
    }
    /**
     * 采用 union all select方式insert，该方式效率较高，但需要指定字段
     * @param columnStr 指定插入的字段例（不区分大小写）：id,name,age
     * @param list      实体对象集合
     * @return
     */
    public int insertObject(String columnStr,List<Object> list) {
        if(StringUtils.isEmpty(columnStr) || list==null || list.size() == 0)
            return 0;
        //获得表名
        Map<String, Object> info = DaoUtil.transformObj(list.get(0));
        Map<String,Object> dataMap = (Map<String, Object>) info.get("dataMap");
        //表名
        String table = (String) info.get("TABLE_NAME");
        //字段
        String[] columns = columnStr.split(",");
        //insert SQL批量
        StringBuilder insertSQL = new StringBuilder("INSERT into ").append(table).append("(").append(columnStr).append(")");
        int insert_i = 0;
        for(Object entity:list){
            Map<String, Object> params = DaoUtil.transformObj(entity);
            Map<String,Object> datas = (Map<String, Object>) params.get("dataMap");

            if(insert_i > 0) {
                insertSQL.append(" union all ");
            }
            int i = 0;
            insertSQL.append("select ");
            for (String column:columns) {
                Object value = datas.get(column.toUpperCase());
                if(i > 0)
                    insertSQL.append(",");
                //特殊数据类型处理
                if(value instanceof Date){
                    Date date = (Date) value;
                    String dateStr = DateUtils.dateToString(date, "yyyy-MM-dd HH:mm:ss");
                    insertSQL.append("to_date('").append(dateStr).append("','yyyy-mm-dd hh24:mi:ss')");
                }else{
                    if(value == null){
                        insertSQL.append("null");
                    }else {
                        insertSQL.append("'").append(value.toString()).append("'");
                    }
                }
                i++;
            }
            insertSQL.append(" from dual");
            insert_i++;
        }
        return execute(insertSQL.toString(),null);
    }

    /**
     * 采用insert all 方式批量添加
     * @param list
     * @return
     */
    public int insertObject(List<Object> list) {
        if(list==null || list.size() == 0)
            return 0;
        //insert SQL批量
        StringBuilder insertSQL = new StringBuilder("INSERT all ");
        int insert_i = 0;
        for(Object entity:list){
            Map<String, Object> info = DaoUtil.transformObj(entity);
            Map<String,Object> dataMap = (Map<String, Object>) info.get("dataMap");
            //表名
            String table = (String) info.get("TABLE_NAME");
            //字段
            Set<String> columns = dataMap.keySet();
            StringBuilder columnStr = new StringBuilder();
            int j = 0;
            for(String column:columns){
                if(j > 0)columnStr.append(",");
                columnStr.append(column);
                j++;
            }
            int i = 0;
            insertSQL.append(" into ").append(table).append("(").append(columnStr).append(")values(");
            for (String column : columns) {
                Object value = dataMap.get(column);
                if(i > 0)
                    insertSQL.append(",");
                //特殊数据类型处理
                if(value instanceof Date){
                    Date date = (Date) value;
                    String dateStr = DateUtils.dateToString(date, "yyyy-MM-dd HH:mm:ss");
                    insertSQL.append("to_date('").append(dateStr).append("','yyyy-mm-dd hh24:mi:ss')");
                }else{
                    if(value == null){
                        insertSQL.append("null");
                    }else {
                        insertSQL.append("'").append(value.toString()).append("'");
                    }
                }
                i++;
            }
            insertSQL.append(")");
            insert_i++;
        }
        insertSQL.append(" SELECT 1 FROM DUAL");
        return execute(insertSQL.toString(),null);
    }
    /**
     * 通过Map插入到数据库
     * @param tableName
     * @param dataMap
     * @return
     */
    public int insertMap(String tableName,LinkedHashMap<String,Object> dataMap){
        Map<String, Object> re = new HashMap<String, Object>();
        re.put("TABLE_NAME",tableName);
        re.put("dataMap",dataMap);
        return baseMapper.insert(re);
    }
    /**
     * 根据实体对象保存
     * @param entity
     * @return
     */
    public int updateObject(Object entity){
        Map<String, Object> params = DaoUtil.transformObj(entity);
        if(!params.containsKey("KEY_ID")){
            throw new RuntimeException("实体类没有主键.");
        }
        if(params.get("KEY_VALUE")==null || (params.get("KEY_VALUE") instanceof String && ((String)params.get("KEY_VALUE")).trim().equals(""))){
            throw new RuntimeException("主键值不能为空.");
        }
        //主键赋值
//        params.put("KEY_VALUE",params.get("KEY_ID"));
        //删除对象中主键数据
        LinkedHashMap<String,Object> dataMap = (LinkedHashMap<String, Object>) params.get("dataMap");
        dataMap.remove(params.get("KEY_ID"));
        //保存
        return baseMapper.update(params);
    }
    public int updateObject(Object entity,Object keyValue){
        Map<String, Object> params = DaoUtil.transformObj(entity);
        if(!params.containsKey("KEY_ID")){
            throw new RuntimeException("实体类没有主键.");
        }
        //主键赋值
        params.put("KEY_VALUE",keyValue);
        //删除对象中主键数据
        LinkedHashMap<String,Object> dataMap = (LinkedHashMap<String, Object>) params.get("dataMap");
        dataMap.remove(params.get("KEY_ID"));
        //保存
        return baseMapper.update(params);
    }

    /**
     * 主键不为空为新增，反之更新
     * @param entity
     * @return
     */
    public int saveObject(Object entity){
        Map<String, Object> params = DaoUtil.transformObj(entity);
        if(!params.containsKey("KEY_ID")){
            throw new RuntimeException("实体类没有主键.");
        }
        //判断是更新还是新增
        if(params.get("KEY_VALUE")==null || (params.get("KEY_VALUE") instanceof String && ((String)params.get("KEY_VALUE")).trim().equals(""))){
            //新增
            return insertObject(entity);
        }else{
            //更新
            return updateObject(entity);
        }
    }
    /**
     * 根据主键删除指定实体对象对应的表数据
     * @param entity    实体类
     * @param keyValue  主键值
     * @return
     */
    public int deleteObject(Class entity,Object keyValue){
        Map<String, Object> params = new HashMap<String, Object>();
        String tableKey = DaoUtil.getTableKey(entity);
        String idKey = DaoUtil.getIdKey(entity);
        //
        if(tableKey == null || idKey == null){
            throw new RuntimeException("实体或主键不存在.");
        }
        //赋值
        params.put("TABLE_NAME",tableKey);//表
        params.put("KEY_ID",idKey);//主键
        params.put("KEY_VALUE",keyValue);//主键值
        return baseMapper.delete(params);
    }

    /**
     * 执行sql
     * @param sql
     * @param params
     * @return
     */
    public int execute(String sql,Map<String,Object> params){
        if(params == null){
            params = new HashMap<String, Object>();
        }
        //处理sql
        sql = sqlParameter(sql, params);
        params.put("SQL",sql);
        return baseMapper.execute(params);
    }

    /**
     * 通过sql查询并将结果集赋值到指定的类
     * @param sql
     * @param params
     * @param clazz
     * @return
     */
    public List<?> list(String sql,Map<String,Object> params, Class clazz) {
        if(params == null){
            params = new HashMap<String, Object>();
        }
        //处理sql
        sql = sqlParameter(sql, params);
        //
        params.put("SQL",sql);
        List<Map<String,Object>> result = baseMapper.list(params);
        List list = DaoUtil.list(result,clazz);
        return list;
    }
    public List<Map<String,Object>> listMap(String sql,Map<String,Object> params) {
        if(params == null){
            params = new HashMap<String, Object>();
        }
        //处理sql
        sql = sqlParameter(sql, params);
        params.put("SQL",sql);
        List<Map<String,Object>> result = baseMapper.list(params);
        return result;
    }
    /**
     * 返回一个数据结果
     * @param sql
     * @param params
     * @return
     */
    public Object queryObject(String sql,Map<String,Object> params) {
        List<Map<String, Object>> list = listMap(sql,params);
        if(list.size() > 0){
            for(Object data : list.get(0).values()){
                //获取第一条第一列数据
                if(data instanceof Map){
                    Map m = (Map) data;
                    for(Object d : m.values()){
                        return d;
                    }
                }else{
                    return data;
                }
            }
        }
        return null;
    }
    /**
     * 获取结果集总数
     * @param sql
     * @param params
     * @return
     */
    public int queryCount(String sql,Map<String,Object> params) {
        Object o = queryObject(sql,params);
        int result = 0;
        if(o!=null){
            if(o instanceof Integer){
                result = (Integer)o;
            }else if(o instanceof Long){
                result = ((Long)o).intValue();
            }else if(o instanceof BigInteger){
                result = ((BigInteger)o).intValue();
            }else if(o instanceof BigDecimal){
                result = ((BigDecimal)o).intValue();
            }else{
                throw new RuntimeException("数据类型不支持，请在此处维护.");
            }
        }
        return result;
    }
    /**
     * 返回实体类的所有数据
     * @param entity
     * @return
     */
    public List<?> listAll(Class entity) {
        //获取表名
        String table = DaoUtil.getTableKey(entity);
        if (null == table) {
            throw new RuntimeException("Error Input Object! Error @Table Annotation.");
        }
        StringBuilder sql = new StringBuilder("select * from ").append(table);
        return list(sql.toString(),null,entity);
    }
    /**
     * 分页处理
     * @param sql
     * @param params
     * @param clazz
     * @param currentPage
     * @param pageSize
     * @return
     */
    public Pager pagedQuery(String sql, Map<String,Object> params, Class clazz, int currentPage, int pageSize){
        if(params == null){
            params = new HashMap<String, Object>();
        }
        //处理sql
        sql = sqlParameter(sql, params);
        params.put("SQL",sql);
        Page<Object> page = PageHelper.startPage(currentPage, pageSize);
        List<Map<String,Object>> result = baseMapper.list(params);
        PageInfo<Map<String,Object>> pageInfo = new PageInfo<Map<String,Object>>(result);
        //将Map转换为实体对象
        List list = DaoUtil.list(result,clazz);
        //封装到分页
        Pager pager = new Pager();
        pager.setData(list);
        pager.setPageSize(pageSize);
        pager.setCurrentPage(currentPage);
        pager.setTotalPage(page.getPages());
        pager.setTotalSize(page.getTotal());

        return pager;
    }
    /**
     * 针对sql中${}参数的处理
     * @param sql
     * @return
     */
    private String sqlParameter(String sql,Map<String,Object> params){
        //提取sql中的所有参数
        Matcher matcher= Pattern.compile("\\$\\{(.+?)\\}",Pattern.CASE_INSENSITIVE).matcher(sql);
        while(matcher.find()){
            //替换参数
            if(params.containsKey(matcher.group(1))) {
                sql = sql.replaceAll("\\$\\{"+matcher.group(1)+"\\}", params.get(matcher.group(1)).toString());
            }else{
                throw new RuntimeException("缺少参数【"+matcher.group(1)+"】");
            }
        }
        //集合参数处理
        for(Map.Entry<String, Object> p:params.entrySet()){
            StringBuffer arrayStr = new StringBuffer();
            if(p.getValue() instanceof Object[]) {
                if (p.getValue() instanceof String[]) {
                    arrayStr.append("'").append(StringUtils.join((String[]) p.getValue(), "','")).append("'");
                } else {
                    throw new RuntimeException("该参数【" + p.getKey() + "】数据格式请在此扩展");
                }
            }
            if (p.getValue() instanceof int[]) {
                for(int i:(int[])p.getValue()){
                    if(arrayStr.length() > 0)
                        arrayStr.append(",");
                    arrayStr.append(i);
                }
            }
            if (p.getValue() instanceof long[]) {
                for(long i:(long[])p.getValue()){
                    if(arrayStr.length() > 0)
                        arrayStr.append(",");
                    arrayStr.append(i);
                }
            }
            if (p.getValue() instanceof float[]) {
                for(float i:(float[])p.getValue()){
                    if(arrayStr.length() > 0)
                        arrayStr.append(",");
                    arrayStr.append(i);
                }
            }
            if (p.getValue() instanceof double[]) {
                for(double i:(double[])p.getValue()){
                    if(arrayStr.length() > 0)
                        arrayStr.append(",");
                    arrayStr.append(i);
                }
            }
            if(p.getValue() instanceof Collection){
                Collection c = (Collection) p.getValue();
                for(Object o : c){
                    if(o instanceof String){
                        if(arrayStr.length() > 0)
                            arrayStr.append(",");
                        arrayStr.append("'").append(o).append("'");
                    }else if(o instanceof Integer){
                        if(arrayStr.length() > 0)
                            arrayStr.append(",");
                        arrayStr.append(o);
                    }else if(o instanceof Long){
                        if(arrayStr.length() > 0)
                            arrayStr.append(",");
                        arrayStr.append(o);
                    }else if(o instanceof Float){
                        if(arrayStr.length() > 0)
                            arrayStr.append(",");
                        arrayStr.append(o);
                    }else if(o instanceof Double){
                        if(arrayStr.length() > 0)
                            arrayStr.append(",");
                        arrayStr.append(o);
                    }else{
                        throw new RuntimeException("该参数【" + p.getKey() + "】数据格式请在此扩展");
                    }
                }
            }
            if(arrayStr.length() > 0) {
                arrayStr.insert(0,"(");
                arrayStr.append(")");
                sql = sql.replaceAll("\\#\\{" + p.getKey() + "\\}", arrayStr.toString());
            }
        }
        return sql;
    }
}
