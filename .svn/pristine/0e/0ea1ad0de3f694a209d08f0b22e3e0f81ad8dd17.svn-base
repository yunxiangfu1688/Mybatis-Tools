package com.genertech.consumer;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.genertech.common.Constants;
import com.genertech.common.base.service.BaseDaoService;
import com.genertech.consumer.dao.CZPSMapper;
import com.genertech.consumer.dao.CmPartBomMapper;
import com.genertech.consumer.dao.LjzdMapper;
import com.genertech.consumer.dao.YXGZTJMapper;
import com.genertech.consumer.domain.BJZD;
import com.genertech.consumer.domain.CZPS;
import com.genertech.consumer.domain.CmPartBom;
import com.genertech.consumer.domain.CrvSyncData;
import com.genertech.consumer.domain.GSZD;
import com.genertech.consumer.domain.LJZD;
import com.genertech.consumer.domain.PJZD;
import com.genertech.consumer.domain.RePartBom;
import com.genertech.consumer.domain.TZBM;
import com.genertech.consumer.domain.YXGZTJ;
import com.genertech.util.DateUtil;

@Component
public class ConsumerManager {

    private static final Logger log = LogManager.getLogger(ConsumerManager.class);
    @Autowired
    private CZPSMapper          czpsMapper;
    @Autowired
    private LjzdMapper          ljzdMapper;
    @Autowired
    private YXGZTJMapper        yxzgtjMapper;
    @Autowired
    private CmPartBomMapper     cmPartBomMapper;
    @Autowired
    private BaseDaoService      daoService;

    /**
     * @Description:车组信息
     * @author Administrator
     * @version 1.0
     * @date 2019年5月16日 下午1:15:56
     * @param message
     */
    @JmsListener(destination = Constants.CZPS_QUEUE)
    public void CZPSConsumer(String message) {
        try {
            log.info("CZPS_QUEUE 消费了一条队列消息" + message);
            List<CZPS> list = JSON.parseArray(message, CZPS.class);
            List<CZPS> updateList = new ArrayList<>();
            // Map<String, CPZD> updateCpzdMap = new HashMap<>();
            Map<String, PJZD> updatePjzdMap = new HashMap<>();
            Map<String, TZBM> updateTzbmMap = new HashMap<>();
            // Map<String, CPZD> insertCpzdMap = new HashMap<>();
            Map<String, PJZD> insertPjzdMap = new HashMap<>();
            Map<String, TZBM> insertTzbmMap = new HashMap<>();
            List<CZPS> insertList = new ArrayList<>();
            // List<Object> insertCpzdList = new ArrayList<>();
            // List<Object> insertPjzdList = new ArrayList<>();
            // List<Object> insertTzbmList = new ArrayList<>();

            log.info("list size:" + list.size());
            List<String> czpsIdList = czpsMapper.getIds();
            // List<String> cpzdIdList = czpsMapper.getCpzdIds();
            List<String> pjzdIdList = czpsMapper.getPjzdIds();
            List<String> tzdmIdList = czpsMapper.getTzbmIds();
            for (CZPS cs : list) {

                try {
                    if (czpsIdList.contains(cs.getId())) {
                        updateList.add(cs);
                    } else {
                        insertList.add(cs);
                    }
                    /*
                     * if (cpzdIdList.contains(cs.getAA())) { if (updateCpzdMap.get(cs.getAA()) == null) {
                     * updateCpzdMap.put(cs.getAA(), cs.getCpzd()); } } else { if (insertCpzdMap.get(cs.getAA()) ==
                     * null) { insertCpzdMap.put(cs.getAA(), cs.getCpzd()); } }
                     */
                    if (pjzdIdList.contains(cs.getAI())) {
                        if (updatePjzdMap.get(cs.getAI()) == null) {
                            updatePjzdMap.put(cs.getAI(), cs.getPjzd());
                        }
                    } else {
                        if (insertPjzdMap.get(cs.getAI()) == null) {
                            insertPjzdMap.put(cs.getAI(), cs.getPjzd());
                        }
                    }
                    if (tzdmIdList.contains(cs.getAC())) {
                        if (updateTzbmMap.get(cs.getAC()) == null) {
                            updateTzbmMap.put(cs.getAC(), cs.getTzbm());
                        }
                    } else {
                        if (insertTzbmMap.get(cs.getAC()) == null) {
                            insertTzbmMap.put(cs.getAC(), cs.getTzbm());
                        }
                    }
                } catch (Exception e) {
                    log.error("czps analysis error:" + JSON.toJSONString(cs));
                    log.error("czps analysis error:" + JSON.toJSONString(e.getMessage()));
                }
            }
            /*
             * if (updateCpzdMap.size() > 0) { for (CPZD cp : updateCpzdMap.values()) { try { if
             * (Constants.CPZD_TYPE.indexOf(cp.getAB()) != -1) { daoService.updateObject(cp); } else { cp.setZZ("0");
             * daoService.updateObject(cp); } } catch (Exception e) { log.error("cpzd update error:" +
             * JSON.toJSONString(cp)); e.printStackTrace(); } } log.info("Cpzd update success ! size: " +
             * updateCpzdMap.size()); } if (insertCpzdMap.size() > 0) { try { CPZD cpzd = null; for (Map.Entry<String,
             * CPZD> entry : insertCpzdMap.entrySet()) { if (StringUtils.isNotBlank(entry.getKey())) { cpzd =
             * entry.getValue(); if (Constants.CPZD_TYPE.indexOf(cpzd.getAB()) != -1) { insertCpzdList.add(cpzd); } else
             * { cpzd.setZZ("0"); insertCpzdList.add(cpzd); } } } daoService.insertAllObjects(insertCpzdList);
             * log.info("Cpzd insert success ! size: " + insertCpzdList.size()); } catch (Exception e) {
             * log.error("Cpzd insert error:" + e); e.printStackTrace(); } }
             */
            if (updatePjzdMap.size() > 0) {
                for (PJZD pj : updatePjzdMap.values()) {
                    try {
                        daoService.updateObject(pj);
                        log.info("Pjzd update :[" + JSON.toJSONString(pj) + "]");
                    } catch (Exception e) {
                        log.error("pjzd update error:" + JSON.toJSONString(pj));
                        log.error("pjzd update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("Pjzd update success ! size: " + updatePjzdMap.size());
            }
            if (insertPjzdMap.size() > 0) {
                try {
                    // for (Map.Entry<String, PJZD> entry : insertPjzdMap.entrySet()) {
                    // if (StringUtils.isNotBlank(entry.getKey())) {
                    // insertPjzdList.add(entry.getValue());
                    // }
                    // }
                    // daoService.insertAllObjects(insertPjzdList);
                    for (PJZD pj : insertPjzdMap.values()) {
                        try {
                            daoService.insertObject(pj);
                            log.info("Pjzd insert :[" + JSON.toJSONString(pj) + "]");
                        } catch (Exception e) {
                            log.error("pjzd insert error:" + JSON.toJSONString(pj));
                            log.error("pjzd insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Pjzd insert success ! size: " + insertPjzdMap.size());
                } catch (Exception e) {
                    log.error("Pjzd insert error:" + JSON.toJSONString(insertPjzdMap));
                    e.printStackTrace();
                }
            }
            if (updateTzbmMap.size() > 0) {
                for (TZBM tz : updateTzbmMap.values()) {
                    try {
                        daoService.updateObject(tz);
                        log.info("tzbm update :[" + JSON.toJSONString(tz) + "]");
                    } catch (Exception e) {
                        log.error("tzbm update error:" + JSON.toJSONString(tz));
                        log.error("tzbm update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("Tzbm update success ! size: " + updateTzbmMap.size());
            }
            if (insertTzbmMap.size() > 0) {
                try {
                    // for (Map.Entry<String, TZBM> entry : insertTzbmMap.entrySet()) {
                    // if (StringUtils.isNotBlank(entry.getKey())) {
                    // insertTzbmList.add(entry.getValue());
                    // }
                    // }
                    // daoService.insertAllObjects(insertTzbmList);
                    for (TZBM tz : insertTzbmMap.values()) {
                        try {
                            if (tz != null) {
                                daoService.insertObject(tz);
                                log.info("Tzbm insert :[" + JSON.toJSONString(tz) + "]");
                            }
                        } catch (Exception e) {
                            log.error("Tzbm insert error:" + JSON.toJSONString(tz));
                            log.error("Tzbm insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Tzbm insert success ! size: " + insertTzbmMap.size());
                } catch (Exception e) {
                    log.error("Tzbm insert error:" + JSON.toJSONString(insertTzbmMap));
                    e.printStackTrace();
                }
            }
            if (updateList.size() > 0) {
                for (CZPS cz : updateList) {
                    try {
                        CrvSyncData("czps", JSON.toJSONString(cz), 2);
                        cz.setBB(null);
                        daoService.updateObject(cz);
                        log.info("czps update :[" + JSON.toJSONString(cz) + "]");
                    } catch (Exception e) {
                        CrvSyncData("czps", JSON.toJSONString(cz), 3);
                        log.error("czps update error:" + JSON.toJSONString(cz));
                        log.error("czps update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("CZPS update success ! size: " + updateList.size());
            }
            if (insertList.size() > 0) {
                try {
                    // daoService.insertAllObjects(insertList);
                    for (CZPS cz : insertList) {
                        try {
                            CrvSyncData("czps", JSON.toJSONString(cz), 1);
                            daoService.insertObject(cz);
                            log.info("czps insert :[" + JSON.toJSONString(cz) + "]");
                        } catch (Exception e) {
                            CrvSyncData("czps", JSON.toJSONString(cz), 3);
                            log.error("czps insert error:" + JSON.toJSONString(cz));
                            log.error("czps insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Czps insert success ! size: " + insertList.size());
                } catch (Exception e) {
                    log.error("Czps insert error:" + JSON.toJSONString(insertList));
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            log.error("车组信息  队列处理失败：" + e);
            log.error("车组信息   失败数据：[" + message + "]");
        }
    }

    /**
     * @Description:物料数据
     * @author Administrator
     * @version 1.0
     * @date 2019年5月16日 下午1:15:40
     * @param message
     */
    @JmsListener(destination = Constants.LJZD_QUEUE)
    public void LJZDConsumer(String message) {
        log.info("LJZD_QUEUE 消费了一条队列消息" + message);
        try {
            List<BJZD> list = JSON.parseArray(message, BJZD.class);
            List<BJZD> updateBjzdList = new ArrayList<>();
            Map<String, GSZD> updateGszdMap = new HashMap<>();
            Map<String, LJZD> updateLjzdMap = new HashMap<>();
            Map<String, GSZD> insertGszdMap = new HashMap<>();
            Map<String, LJZD> insertLjzdMap = new HashMap<>();
            // List<Object> insertLjzdList = new ArrayList<>();
            // List<Object> insertGszdList = new ArrayList<>();
            List<BJZD> insertBjzdList = new ArrayList<>();
            log.info("list size:" + list.size());
            List<String> ljzdIdList = ljzdMapper.getIds();
            List<String> gszdIdList = ljzdMapper.getGszdIds();
            List<String> bjzdIdList = ljzdMapper.getBjzdIds();
            for (BJZD lj : list) {
                try {
                    if (gszdIdList.contains(lj.getAA())) {
                        if (updateGszdMap.get(lj.getAA()) == null) {
                            updateGszdMap.put(lj.getAA(), lj.getGszd());
                        }
                    } else {
                        if (insertGszdMap.get(lj.getAA()) == null) {
                            insertGszdMap.put(lj.getAA(), lj.getGszd());
                        }
                    }
                    if (ljzdIdList.contains(lj.getAB())) {
                        if (updateLjzdMap.get(lj.getAB()) == null) {
                            updateLjzdMap.put(lj.getAB(), lj.getLjzd());
                        }
                    } else {
                        if (insertLjzdMap.get(lj.getAB()) == null) {
                            insertLjzdMap.put(lj.getAB(), lj.getLjzd());
                        }
                    }
                    if (bjzdIdList.contains(lj.getID())) {
                        updateBjzdList.add(lj);
                    } else {
                        insertBjzdList.add(lj);
                    }
                } catch (Exception e) {
                    log.error("ljzd analysis error:" + JSON.toJSONString(lj));
                    log.error("ljzd analysis error:" + JSON.toJSONString(e.getMessage()));
                }
            }
            if (updateGszdMap.size() > 0) {
                for (GSZD cp : updateGszdMap.values()) {
                    try {
                        daoService.updateObject(cp);
                        log.info("gszd update :[" + JSON.toJSONString(cp) + "]");
                    } catch (Exception e) {
                        log.error("gszd update error:" + JSON.toJSONString(cp));
                        log.error("gszd update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("GSZD update success ! size: " + updateGszdMap.size());
            }
            if (insertGszdMap.size() > 0) {
                try {
                    // for (Map.Entry<String, GSZD> entry : insertGszdMap.entrySet()) {
                    // if (StringUtils.isNotBlank(entry.getKey())) {
                    // insertGszdList.add(entry.getValue());
                    // }
                    // }
                    // daoService.insertAllObjects(insertGszdList);
                    for (GSZD cp : insertGszdMap.values()) {
                        try {
                            daoService.insertObject(cp);
                            log.info("gszd insert :[" + JSON.toJSONString(cp) + "]");
                        } catch (Exception e) {
                            log.error("gszd insert error:" + JSON.toJSONString(cp));
                            log.error("gszd insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Gszd insert success ! size: " + insertGszdMap.size());
                } catch (Exception e) {
                    log.error("gszd insert error:" + JSON.toJSONString(insertGszdMap));
                    e.printStackTrace();
                }
            }
            if (updateLjzdMap.size() > 0) {
                for (LJZD pj : updateLjzdMap.values()) {
                    try {
                        daoService.updateObject(pj);
                        log.info("ljzd update :[" + JSON.toJSONString(pj) + "]");
                    } catch (Exception e) {
                        log.error("ljzd update error:" + JSON.toJSONString(pj));
                        log.error("ljzd update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("Ljzd update success ! size: " + updateLjzdMap.size());
            }
            if (insertLjzdMap.size() > 0) {
                try {
                    // for (Map.Entry<String, LJZD> entry : insertLjzdMap.entrySet()) {
                    // if (StringUtils.isNotBlank(entry.getKey())) {
                    // insertLjzdList.add(entry.getValue());
                    // }
                    // }
                    // daoService.insertAllObjects(insertLjzdList);
                    for (LJZD pj : insertLjzdMap.values()) {
                        try {
                            daoService.insertObject(pj);
                            log.info("ljzd insert :[" + JSON.toJSONString(pj) + "]");
                        } catch (Exception e) {
                            log.error("ljzd insert error:" + JSON.toJSONString(pj));
                            log.error("ljzd insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Ljzd insert success ! size: " + insertLjzdMap.size());
                } catch (Exception e) {
                    log.error("Ljzd insert error:" + JSON.toJSONString(insertLjzdMap));
                    e.printStackTrace();
                }
            }
            if (updateBjzdList.size() > 0) {
                for (BJZD bj : updateBjzdList) {
                    try {
                        CrvSyncData("ljzd", JSON.toJSONString(bj), 2);
                        daoService.updateObject(bj);
                        log.info("bjzd update :[" + JSON.toJSONString(bj) + "]");
                    } catch (Exception e) {
                        CrvSyncData("ljzd", JSON.toJSONString(bj), 3);
                        log.error("bjzd update error:" + JSON.toJSONString(bj));
                        log.error("bjzd update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("BJZD update success ! size: " + updateBjzdList.size());
            }
            if (insertBjzdList.size() > 0) {
                try {
                    // daoService.insertAllObjects(insertBjzdList);
                    for (BJZD bj : insertBjzdList) {
                        try {
                            CrvSyncData("ljzd", JSON.toJSONString(bj), 1);
                            daoService.insertObject(bj);
                            log.info("bjzd insert :[" + JSON.toJSONString(bj) + "]");
                        } catch (Exception e) {
                            CrvSyncData("ljzd", JSON.toJSONString(bj), 3);
                            log.error("bjzd insert error:" + JSON.toJSONString(bj));
                            log.error("bjzd insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("Bjzd insert success ! size: " + insertBjzdList.size());
                } catch (Exception e) {
                    log.error("Bjzd insert error:" + JSON.toJSONString(insertBjzdList));
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            log.error("物料数据 队列处理失败：" + e);
            log.error("物料数据   队列失败数据：[" + message + "]");
        }
    }

    @JmsListener(destination = Constants.CM_BOOM_QUEUE)
    public void CmBoomConsumer(String message) {
        try {
            log.info("CM_BOOM_QUEUE 消费了一条队列消息" + message);
            List<CmPartBom> list = JSON.parseArray(message, CmPartBom.class);
            log.info("CM_PART_BOOM size:" + list.size());
            List<CmPartBom> updateList = new ArrayList<>();
            List<CmPartBom> insertList = new ArrayList<>();
            for (CmPartBom bom : list) {
                try {
                    if (StringUtils.isNotBlank(cmPartBomMapper.getById(bom.getID()))) {
                        updateList.add(bom);
                    } else {
                        insertList.add(bom);
                    }
                } catch (Exception e) {
                    log.error("CM_PART_BOOM analysis error:" + JSON.toJSONString(bom));
                    log.error("CM_PART_BOOM analysis error:" + JSON.toJSONString(e.getMessage()));
                }
            }
            if (updateList.size() > 0) {
                for (CmPartBom cmPartBom : updateList) {
                    try {
                        CrvSyncData("cm_part_bom", JSON.toJSONString(cmPartBom), 2);
                        daoService.updateObject(cmPartBom);
                        log.info("cm_part_bom update :[" + JSON.toJSONString(cmPartBom) + "]");
                    } catch (Exception e) {
                        CrvSyncData("cm_part_bom", JSON.toJSONString(cmPartBom), 3);
                        log.error("cm_part_bom update error:" + JSON.toJSONString(cmPartBom));
                        log.error("cm_part_bom update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("CM_PART_BOM update success ! size: " + updateList.size());
            }
            if (insertList.size() > 0) {
                try {
                    // daoService.insertAllObjects(insertList);
                    for (CmPartBom cmPartBom : insertList) {
                        try {
                            CrvSyncData("cm_part_bom", JSON.toJSONString(cmPartBom), 1);
                            daoService.insertObject(cmPartBom);
                            log.info("cm_part_bom insert :[" + JSON.toJSONString(cmPartBom) + "]");
                        } catch (Exception e) {
                            CrvSyncData("cm_part_bom", JSON.toJSONString(cmPartBom), 3);
                            log.error("cm_part_bom insert error:" + JSON.toJSONString(cmPartBom));
                            log.error("cm_part_bom insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("CM_PART_BOM insert success ! size: " + insertList.size());
                } catch (Exception e) {
                    log.error("CM_PART_BOM insert error:" + JSON.toJSONString(insertList));
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            log.error("cm_part_bom 队列处理失败：" + e);
            log.error("cm_part_bom  失败数据：[" + message + "]");
        }
    }

    @JmsListener(destination = Constants.RE_BOOM_QUEUE)
    public void ReBoomConsumer(String message) {
        try {
            log.info("RE_BOOM_QUEUE 消费了一条队列消息" + message);
            List<RePartBom> list = JSON.parseArray(message, RePartBom.class);
            log.info("RE_PART_BOOM size：" + list.size());
            List<RePartBom> updateList = new ArrayList<>();
            List<RePartBom> insertList = new ArrayList<>();
            for (RePartBom bom : list) {
                try {
                    if (StringUtils.isNotBlank(cmPartBomMapper.getReById(bom.getID()))) {
                        updateList.add(bom);
                    } else {
                        insertList.add(bom);
                    }
                } catch (Exception e) {
                    log.error("RE_PART_BOOM analysis error:" + JSON.toJSONString(bom));
                    log.error("RE_PART_BOOM analysis error:" + JSON.toJSONString(e.getMessage()));
                }
            }
            if (updateList.size() > 0) {
                for (RePartBom bom : updateList) {
                    try {
                        CrvSyncData("re_part_bom", JSON.toJSONString(bom), 2);
                        daoService.updateObject(bom);
                        log.info("re_part_bom update :[" + JSON.toJSONString(bom) + "]");
                    } catch (Exception e) {
                        CrvSyncData("re_part_bom", JSON.toJSONString(bom), 3);
                        log.error("re_part_bom update error:" + JSON.toJSONString(bom));
                        log.error("re_part_bom update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("RE_PART_BOM update success ! size: " + updateList.size());
            }
            if (insertList.size() > 0) {
                try {
                    // daoService.insertAllObjects(insertList);
                    for (RePartBom bom : insertList) {
                        try {
                            CrvSyncData("re_part_bom", JSON.toJSONString(bom), 1);
                            daoService.insertObject(bom);
                            log.info("re_part_bom insert :[" + JSON.toJSONString(bom) + "]");
                        } catch (Exception e) {
                            CrvSyncData("re_part_bom", JSON.toJSONString(bom), 3);
                            log.error("re_part_bom insert error:" + JSON.toJSONString(bom));
                            log.error("re_part_bom insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("RE_PART_BOM insert success ! size: " + insertList.size());
                } catch (Exception e) {
                    log.error("RE_PART_BOM insert error:" + JSON.toJSONString(insertList));
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            log.error("re_part_bom 队列处理失败：" + e);
            log.error("re_part_bom  失败数据：[" + message + "]");
        }
    }

    @JmsListener(destination = Constants.YXGZTJ_QUEUE)
    public void YXZGTJConsumer(String message) {
        log.info("YXGZTJ_QUEUE 消费了一条队列消息" + message);
        try {
            List<YXGZTJ> list = JSON.parseArray(message, YXGZTJ.class);
            log.info("list size:" + list.size());
            List<YXGZTJ> updateList = new ArrayList<>();
            List<YXGZTJ> insertList = new ArrayList<>();
            for (YXGZTJ yx : list) {
                try {
                    if (StringUtils.isNotBlank(yxzgtjMapper.getById(yx.getAA()))) {
                        updateList.add(yx);
                    } else {
                        insertList.add(yx);
                    }
                } catch (Exception e) {
                    log.error("yxgztj analysis error:" + JSON.toJSONString(yx));
                    log.error("yxgztj analysis error:" + JSON.toJSONString(e.getMessage()));
                }
            }
            if (updateList.size() > 0) {
                for (YXGZTJ yj : updateList) {
                    try {
                        CrvSyncData("yxgztj", JSON.toJSONString(yj), 2);
                        daoService.updateObject(yj);
                        log.info("yxgztj update :[" + JSON.toJSONString(yj) + "]");
                    } catch (Exception e) {
                        CrvSyncData("yxgztj", JSON.toJSONString(yj), 3);
                        log.error("yxgztj update error:" + JSON.toJSONString(yj));
                        log.error("yxgztj update error:" + JSON.toJSONString(e.getMessage()));
                    }
                }
                log.info("YXGZTJ update success ! size: " + updateList.size());
            }
            if (insertList.size() > 0) {
                try {
                    // daoService.insertAllObjects(insertList);
                    for (YXGZTJ yj : insertList) {
                        try {
                            CrvSyncData("yxgztj", JSON.toJSONString(yj), 1);
                            daoService.insertObject(yj);
                            log.info("yxgztj insert :[" + JSON.toJSONString(yj) + "]");
                        } catch (Exception e) {
                            CrvSyncData("yxgztj", JSON.toJSONString(yj), 3);
                            log.error("yxgztj insert error:" + JSON.toJSONString(yj));
                            log.error("yxgztj insert error:" + JSON.toJSONString(e.getMessage()));
                        }
                    }
                    log.info("YXGZTJ insert success ! size: " + insertList.size());
                } catch (Exception e) {
                    log.error("YXGZTJ insert error:" + JSON.toJSONString(insertList));
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            log.error("安监报故障  队列处理失败：" + e);
            log.error("安监报故障  失败数据：[" + message + "]");
            e.printStackTrace();
        }
    }

    private void CrvSyncData(String type, String data, Integer status) {
        CrvSyncData csd = new CrvSyncData();
        csd.setId(DateUtil.getCurrentDate("yyyyMMddHHmmssSSS"));
        csd.setType(type);
        csd.setSync_data(data);
        csd.setCREATE_TIME(new Date());
        csd.setSTATUS(status);
        daoService.insertObject(csd);
    }

    public static void main(String[] args) {
        System.out.println(DateUtil.getCurrentDate("yyyyMMddHHmmssSSS"));

    }

}
